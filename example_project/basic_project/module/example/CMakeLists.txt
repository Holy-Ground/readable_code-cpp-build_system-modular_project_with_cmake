cmake_minimum_required(VERSION 3.11)

project(CMAKE_GROUND_EXAMPLE VERSION 0.0.1 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(${PROJECT_NAME}_PATH ${CMAKE_CURRENT_SOURCE_DIR})
set(${PROJECT_NAME}_SOURCE_PATH "${${PROJECT_NAME}_PATH}/src")
set(${PROJECT_NAME}_INCLUDE_PATH "${${PROJECT_NAME}_PATH}/include")
set(${PROJECT_NAME}_TEST_PATH "${${PROJECT_NAME}_PATH}/test")
set(${PROJECT_NAME}_RESOURCE_PATH "${${PROJECT_NAME}_PATH}/resource")
set(${PROJECT_NAME}_THIRDPARTY_PATH "${${PROJECT_NAME}_PATH}/thirdparty")

message(STATUS "PROJECT_NAME: ${PROJECT_NAME}")
message(STATUS "PROJECT_VERSION: ${PROJECT_VERSION}")
message(STATUS "${PROJECT_NAME}_PATH: ${${PROJECT_NAME}_PATH}")
message(STATUS "${PROJECT_NAME}_SOURCE_PATH: ${${PROJECT_NAME}_SOURCE_PATH}")
message(STATUS "${PROJECT_NAME}_INCLUDE_PATH: ${${PROJECT_NAME}_INCLUDE_PATH}")
message(STATUS "${PROJECT_NAME}_TEST_PATH: ${${PROJECT_NAME}_TEST_PATH}")
message(STATUS "${PROJECT_NAME}_RESOURCE_PATH: ${${PROJECT_NAME}_RESOURCE_PATH}")
message(STATUS "${PROJECT_NAME}_THIRDPARTY_PATH: ${${PROJECT_NAME}_THIRDPARTY_PATH}")

include(cmake/find_thirdparties.cmake)

set(${PROJECT_NAME}_SOURCE_FILES
  src/utils.cpp
)
add_library(${PROJECT_NAME} STATIC
  ${${PROJECT_NAME}_SOURCE_FILES}
)
target_include_directories(${PROJECT_NAME} PUBLIC
  ${${PROJECT_NAME}_INCLUDE_PATH}
)
target_compile_options(${PROJECT_NAME} PRIVATE
  -Wall -Wextra -Wpedantic -Werror
)

add_subdirectory(${${PROJECT_NAME}_TEST_PATH})
